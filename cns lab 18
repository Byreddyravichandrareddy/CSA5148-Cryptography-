#include <stdio.h>
#include <stdint.h>

const int initial_permutation[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

const int pc2_permutation[] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

void permute(const uint64_t input, uint64_t *output, const int *table, int table_size) {
    *output = 0;
    for (int i = 0; i < table_size; ++i) {
        *output |= ((input >> (64 - table[i])) & 1) << (table_size - 1 - i);
    }
}

void generate_subkeys(const uint64_t initial_key, uint64_t *subkeys) {
    
    uint64_t permuted_key;
    permute(initial_key, &permuted_key, initial_permutation, 64);

     
    uint32_t C = permuted_key >> 28;    
    uint32_t D = permuted_key & 0x0FFFFFFF;  
 
    const int left_rotations[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
 
    for (int i = 0; i < 16; ++i) {
        
        C = ((C << left_rotations[i]) | (C >> (28 - left_rotations[i]))) & 0x0FFFFFFF;
        D = ((D << left_rotations[i]) | (D >> (28 - left_rotations[i]))) & 0x0FFFFFFF;
 
        uint64_t combined = ((uint64_t)C << 28) | D;
 
        permute(combined, &subkeys[i], pc2_permutation, 48);
    }
}

int main() {
     
    uint64_t initial_key = 0x123456789ABCDE;

   
    uint64_t subkeys[16];
 
 
    generate_subkeys(initial_key, subkeys);
 
    printf("Generated subkeys:\n");
    for (int i = 0; i < 16; ++i) {
        printf("Subkey %2d: %012lX\n", i+1, subkeys[i]);
    }

    return 0;
}
