#include <stdio.h>
#include <stdint.h>

const int initial_permutation[] = { 58, 50, 42, 34, 26, 18, 10, 2,
                                    60, 52, 44, 36, 28, 20, 12, 4,
                                    62, 54, 46, 38, 30, 22, 14, 6,
                                    64, 56, 48, 40, 32, 24, 16, 8,
                                    57, 49, 41, 33, 25, 17, 9, 1,
                                    59, 51, 43, 35, 27, 19, 11, 3,
                                    61, 53, 45, 37, 29, 21, 13, 5,
                                    63, 55, 47, 39, 31, 23, 15, 7 };

const int final_permutation[] = { 40, 8, 48, 16, 56, 24, 64, 32,
                                  39, 7, 47, 15, 55, 23, 63, 31,
                                  38, 6, 46, 14, 54, 22, 62, 30,
                                  37, 5, 45, 13, 53, 21, 61, 29,
                                  36, 4, 44, 12, 52, 20, 60, 28,
                                  35, 3, 43, 11, 51, 19, 59, 27,
                                  34, 2, 42, 10, 50, 18, 58, 26,
                                  33, 1, 41, 9, 49, 17, 57, 25 };

const int expansion_table[] = { 32, 1, 2, 3, 4, 5,
                                4, 5, 6, 7, 8, 9,
                                8, 9, 10, 11, 12, 13,
                                12, 13, 14, 15, 16, 17,
                                16, 17, 18, 19, 20, 21,
                                20, 21, 22, 23, 24, 25,
                                24, 25, 26, 27, 28, 29,
                                28, 29, 30, 31, 32, 1 };

const int pbox_permutation[] = { 16, 7, 20, 21, 29, 12, 28, 17,
                                 1, 15, 23, 26, 5, 18, 31, 10,
                                 2, 8, 24, 14, 32, 27, 3, 9,
                                 19, 13, 30, 6, 22, 11, 4, 25 };

const int key_shifts[] = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

void des_decrypt(uint64_t cipher_text, uint64_t *plain_text, uint64_t key);
void generate_round_keys(uint64_t key, uint64_t round_keys[]);

uint64_t permute(uint64_t data, const int *permutation, int size);

uint32_t feistel(uint32_t right_half, uint64_t round_key);

int main() {
    uint64_t plain_text = 0x0;  
    uint64_t cipher_text = 0x85E813540F0AB405;  
    uint64_t key = 0x133457799BBCDFF1;  

    des_decrypt(cipher_text, &plain_text, key);

    printf("Decrypted plain text: %llx\n", plain_text);  

    return 0;
}

void des_decrypt(uint64_t cipher_text, uint64_t *plain_text, uint64_t key) {
    uint64_t round_keys[16];

    generate_round_keys(key, round_keys);

    uint64_t permuted_cipher = permute(cipher_text, initial_permutation, 64);

    uint32_t left = permuted_cipher >> 32;
    uint32_t right = permuted_cipher & 0xFFFFFFFF;

    for (int i = 15; i >= 0; i--) {
        uint32_t temp = left;
        left = right;
        right = temp ^ feistel(right, round_keys[i]);
    }

    uint64_t combined = ((uint64_t)right << 32) | (uint64_t)left;

    *plain_text = permute(combined, final_permutation, 64);
}

void generate_round_keys(uint64_t key, uint64_t round_keys[]) {

    for (int i = 0; i < 16; i++) {
  
        for (int j = 0; j < key_shifts[i]; j++) {

        }

    }
}

uint64_t permute(uint64_t data, const int *permutation, int size) {
    uint64_t permuted_data = 0;
    for (int i = 0; i < size; i++) {
        permuted_data <<= 1;
        permuted_data |= (data >> (64 - permutation[i])) & 0x1;
    }
    return permuted_data;
}

uint32_t feistel(uint32_t right_half, uint64_t round_key) {

    uint64_t expanded_half = permute((uint64_t)right_half, expansion_table, 48);

    expanded_half ^= round_key;

    return permute((uint64_t)expanded_half, pbox_permutation, 32);
}
