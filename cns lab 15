#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
#define MAX_PLAINTEXTS 10
void decrypt(char *ciphertext, int key, char *plaintext) {
    int i;
    int len = strlen(ciphertext);
    for (i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            
            plaintext[i] = ((ciphertext[i] - base - key + ALPHABET_SIZE) % ALPHABET_SIZE) + base;
        } else {

            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[len] = '\0';
}

void calculate_frequencies(char *text, int *freq) {
    int i;
    int len = strlen(text);
    for (i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            int index = tolower(text[i]) - 'a';
            freq[index]++;
        }
    }
}

void frequency_attack(char *ciphertext, int top_plaintexts) {
    char plaintext[strlen(ciphertext) + 1];
    int key;
    int freq[ALPHABET_SIZE] = {0};
    int max_freq = 0;
    int i, j;

    calculate_frequencies(ciphertext, freq);

    for (i = 0; i < ALPHABET_SIZE; i++) {
        if (freq[i] > max_freq) {
            max_freq = freq[i];
            key = (i - ('e' - 'a') + ALPHABET_SIZE) % ALPHABET_SIZE;
        }
    }

    decrypt(ciphertext, key, plaintext);

    printf("Key: %d\n", key);
    printf("Decrypted Plaintext: %s\n", plaintext);
}

int main() {
    char ciphertext[1000]; 
    int top_plaintexts = MAX_PLAINTEXTS;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';
    frequency_attack(ciphertext, top_plaintexts);

    return 0;
}
